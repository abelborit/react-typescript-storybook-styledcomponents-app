import { Meta, StoryObj } from "@storybook/react";
import { Counter } from "./index";
import { mockCounterValueProps } from "./Counter.mock";
import { expect, userEvent, within } from "@storybook/test";

/* NOTA: se est치n estableciendo par치metros a esta historia sobre backgrounds y tambi칠n de forma global sobre los backgrounds en el preview.ts pero los par치metros m치s espec칤ficos tienen prioridad, es decir, un par치metro de historia espec칤fico (como en este caso) sobrescribe un par치metro global */
const meta: Meta = {
  title: "My_Examples/Counter",
  component: Counter,
  /* "tags" para que tenga una documentaci칩n del componente y sus casos de uso que se genera de forma autom치tica con algunas configuraciones en la interface del componente como tal que son con comentarios */
  tags: ["autodocs"],
  /* "parameters" son un conjunto de metadatos est치ticos con nombre sobre una historia, que normalmente se utilizan para controlar el comportamiento de las funciones y complementos de Storybook. */
  parameters: {
    // layout: "centered",
    backgrounds: {
      values: [
        { name: "light", value: "#fff" },
        { name: "dark", value: "#333" },
        { name: "red", value: "#c00" },
      ],
    },
  },
  /* "decorators" es una forma de envolver una historia con una funcionalidad adicional de "renderizado". Muchos complementos definen decoradores para aumentar sus historias con renderizado adicional o recopilar detalles sobre c칩mo se representa su historia. Los componentes a menudo se crean con suposiciones sobre "d칩nde" se representan y sus estilos pueden esperar un tema o un contenedor de dise침o, o su interfaz de usuario puede esperar contextos o proveedores de datos espec칤ficos, etc. Este decorators se aplica a todos las historias de este componente */
  decorators: [
    (Story) => (
      <div
        style={{
          padding: "1rem",
          backgroundColor: "rgba(0, 0, 0, 0.1)",
          borderRadius: "16px",
        }}
      >
        {/* 游녢 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}
        <Story />
      </div>
    ),
  ],
  /* "argTypes" para realizar configuraciones a los argumentos: https://github.com/storybookjs/storybook/blob/91e9dee33faa8eff0b342a366845de7100415367/addons/controls/README.md#control-annotations */
  argTypes: {},
} satisfies Meta<typeof Counter>;
export default meta;

type Story = StoryObj<typeof meta>;

/* darse cuenta que comienza con may칰scula */
export const CounterValue0: Story = {
  args: {
    ...mockCounterValueProps.counterValue0,
  },

  /* Las funciones play son peque침os fragmentos de c칩digo ejecutados despu칠s de que se renderiza la historia. Permiti칠ndole interactuar con sus componentes y probar escenarios que de otro modo requerir칤an la intervenci칩n del usuario. Cuando Storybook termina de renderizar la historia, ejecuta los pasos definidos dentro de la funci칩n play, interactuando con el componente y todo ello sin necesidad de intervenci칩n del usuario. Si se revisa el panel Interactions se ver치 el flujo paso a paso. */
  /* Sin la ayuda de la funci칩n play y @storybook/addon-interactions, se tendr칤a que escribir nuestras propias historias e interactuar manualmente con el componente para probar cada escenario de caso de uso posible. */
  play: async ({ canvasElement }) => {
    // console.log({ canvasElement });

    /* Asigna canvas al elemento ra칤z del componente para que a partir de 칠l se puedan ir haciendo las pruebas */
    const canvas = within(canvasElement);

    /* usar getByLabelText para seleccionar un elemento del DOM que tiene el atributo aria-label="increaseButton" y como opciones tendr치 selector: "button", y darse cuenta que el getByLabelText tiene el tipo de HTMLElement */
    const increaseButton = canvas.getByLabelText<HTMLElement>(
      "increaseButton",
      {
        selector: "button",
      }
    );
    // console.log(increaseButton);

    const decreaseButton = canvas.getByLabelText<HTMLElement>(
      "decreaseButton",
      {
        selector: "button",
      }
    );
    // console.log(decreaseButton);

    const resetButton = canvas.getByLabelText<HTMLElement>("resetButton", {
      selector: "button",
    });
    // console.log(resetButton);

    const counterState = canvas.getByTestId<HTMLElement>("counterState");
    // console.log(counterState);

    await expect(increaseButton).toBeInTheDocument();
    await userEvent.click(increaseButton);
    await userEvent.click(increaseButton);

    // Verifica que el texto contenido dentro del elemento <p> contenga un "1"
    await expect(counterState.textContent).toContain("2");

    await userEvent.click(decreaseButton);
    await expect(counterState.textContent).toContain("1");

    await userEvent.click(resetButton);
    await expect(counterState.textContent).toContain("0");
  },
};

export const CounterValue10: Story = {
  args: {
    ...mockCounterValueProps.counterValue10,
  },
  /* Este decorators se aplica solo a esta historia de este componente */
  decorators: [
    (Story) => (
      <div
        style={{
          padding: "1rem",
          backgroundColor: "rgba(0, 0, 0, 0.2)",
          borderRadius: "16px",
        }}
      >
        {/* 游녢 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}
        <Story />
      </div>
    ),
  ],
};

export const CounterValue20: Story = {
  args: {
    ...mockCounterValueProps.counterValue20,
  },
};
